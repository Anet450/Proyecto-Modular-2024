using System.Collections;
using System.Collections.Generic;
using UnityEditor.PackageManager.Requests;
using UnityEngine;
using UnityEngine.Networking;
using Newtonsoft.Json;
using System;
using static CrearPartida;
using Unity.VisualScripting;

public class ObtenerDatos : MonoBehaviour
{
    public class Actualizacion
    {
        public string IDUpdates;
        public string IDMachineKey;
        public string UpdateChanges;
        public string IsSpecialProcess;
        public string Authorized;
        public string Date;
        public string MachineName;
    }

    public class Inventario
    {
        public string IDCode;
        public string Description;
        public string ObjectName;
        public string PhysicalUbication;
        public string InventoryUbication;
        public int Quantity;
    }

    public class Horario
    {
        public string IDCode;
        public string Name;
        public string Schedule;
        public string Hr_E;
        public string Hr_EC;
        public string Hr_FC;
        public string Hr_F;
        public string Date;
    }

    // Computadora para la pantlla de ComputadorasActivas e Inactivas
    public class Computadora
    {
        public string IDCode;
        public string Name;
        public string Date;
        public string ConexionHr;
        public string DesconexionHr;
        public string User;
        public string Status;
        public string Duration;
    }

    // Computadora con IP
    public class Computadora_IP
    {
        public string IDComputer;
        public string ComputerName;
        public string IpDirection;
        public string Description;
        public string Site_Location;
        public string Location;
        public string Status;
        public string Ubicacion_Inventario;
        public string Piezas;
        public string En_Sistema;
    }

    public class Alarm
    {
        public string IDAlarm;
        public string AlarmName;
        public string DirectionIP;
        public string Site;
        public string Location;
        public string Status;
        public string EnSistema;
    }

    public class Door
    {
        public string IDDoor;
        public string DoorName;
        public string IPDirection;
        public string Location;
        public string Location_Site;
        public string Status;
        public string En_Sistema;
    }

    public class Copia
    {
        public string IDCopy;
        public string CopiedDocument;
        public string OrginalDocument;
        public string Motive;
        public string CreateDate;
        public string FileDirectory;
    }

    public class GetPasswords_BM
    {
        public string ID_Arch;
        public string Propietario;
        public string Name;
        public string Password;
        public string Description;
    }

    public class GetPasswords_C
    {
        public string Arch_Code;
        public string ComputerName;
        public string Password;
        public string Description;
    }

    public class Asociado
    {
        public string IDCode;
        public string Name;
        public string Positon;
        public string EntryDate;
    }




    static string server_address = "https://cve-2024-sinnombre-c1a5c43cfc5f.herokuapp.com";
    // public static string server_address = "localhost:8000";
    private string http_result;

    // Obtener el inventario
    public void GetInventario()
    {
        StartCoroutine(GetInventarioRequest(server_address + "/api/gameplay/inventory"));
    }

    public void GetCopias(Action<List<Copia>> callback)
    {
        StartCoroutine(GetInventarioCopias(server_address + "/api/gameplay/copies", callback));
    }

    public void GetComputadoras(Action<List<Computadora>> callback)
    {
        StartCoroutine(GetComputadorasRequest(server_address + "/api/gameplay/activecomputersbyuser", callback));
    }

    public void GetComputadora_IP(Action<List<Computadora_IP>> callback)
    {
        StartCoroutine(GetComputadora_IPRequest(server_address + "/api/gameplay/computers", callback));
    }

    public void GetHorarios(Action<List<Horario>> callback)
    {
        StartCoroutine(GetHorariosRequest(server_address + "/api/gameplay/schedule", callback));
    }

    public void GetActualizaciones(Action<List<Actualizacion>> callback)
    {
        StartCoroutine(GetActualizacionesRequest(server_address + "/api/gameplay/updates", callback));
    }

    public void GetAsociados(Action<List<Asociado>> callback)
    {
        StartCoroutine(GetAsociadosRequest(server_address + "/api/gameplay/asociated", callback));
    }

    public void GetGetPasswords_BM(Action<List<GetPasswords_BM>> callback)
    {
        StartCoroutine(GetGetPasswords_BMRequest(server_address + "/api/gameplay/GetPasswords_BM", callback));
    }

    public void GetGetPasswords_C(Action<List<GetPasswords_C>> callback)
    {
        StartCoroutine(GetGetPasswords_C(server_address + "/api/gameplay/GetPasswords_C", callback));
    }

    public void GetDoors(Action<List<Door>> callback)
    {
        StartCoroutine(GetDoorsRequest(server_address + "/api/gameplay/doors", callback));
    }

    public void GetAlarms(Action<List<Alarm>> callback)
    {
        StartCoroutine(GetAlarmsRequest(server_address + "/api/gameplay/alarms", callback));
    }

    // Start is called before the first frame update
    void Start()
    {


    }

    // Update is called once per frame
    void Update()
    {

    }

    IEnumerator GetComputadora_IPRequest(string uri, Action<List<Computadora_IP>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Computadora_IP>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetAlarmsRequest(string uri, Action<List<Alarm>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Alarm>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetActualizacionesRequest(string uri, Action<List<Actualizacion>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Actualizacion>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetDoorsRequest(string uri, Action<List<Door>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Door>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetGetPasswords_BMRequest(string uri, Action<List<GetPasswords_BM>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<GetPasswords_BM>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }       

    IEnumerator GetGetPasswords_C(string uri, Action<List<GetPasswords_C>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<GetPasswords_C>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetAsociadosRequest(string uri, Action<List<Asociado>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Asociado>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetHorariosRequest(string uri, Action<List<Horario>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Horario>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetComputadorasRequest(string uri, Action<List<Computadora>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Computadora>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }

    IEnumerator GetInventarioRequest(string uri)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            Debug.Log("Received: " + uwr.downloadHandler.text);
            http_result = uwr.downloadHandler.text;
            var result = JsonConvert.DeserializeObject<List<Inventario>>(http_result);
            Debug.Log(result[0].ObjectName);
        }
    }

    IEnumerator GetInventarioCopias(string uri, Action<List<Copia>> callback)
    {
        UnityWebRequest uwr = UnityWebRequest.Get(uri);
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            Debug.Log("Received: " + uwr.downloadHandler.text);
            http_result = uwr.downloadHandler.text;
            try
            {
                var result = JsonConvert.DeserializeObject<List<Copia>>(http_result);
                callback(result);
            }
            catch (Exception e)
            {
                Debug.Log(e);
            }
        }
    }
}