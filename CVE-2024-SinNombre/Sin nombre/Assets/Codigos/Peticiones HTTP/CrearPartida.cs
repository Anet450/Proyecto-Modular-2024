using System.Collections;
using UnityEngine;
using UnityEngine.Networking;
using System;


/*
 * Cloud:
 * http://cve-2024-sinnombre-c1a5c43cfc5f.herokuapp.com/
 * 
 */

public class CrearPartida : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
    public class Player
    {
        public string IDJugador;
    }
    /*
     * {"IDPlay":12,"IDPlayer":11,"PlayingTime":"0","HasFinished":false,"EndingType":null
     * 
     * 
     */

    public class Play
    {
        public int IDPlay;
        public int IDPlayer;
        public int PlayingTime;
        public bool HasFinished;
        public int EndingType;
    }

    public void CreatePlay()
    {
        Player jugador = new Player();
        // Crear ID de jugador para partida
        jugador.IDJugador = Guid.NewGuid().ToString();
        PlayerPrefs.SetString("PlayerID", jugador.IDJugador);
        string playerToJson = JsonUtility.ToJson(jugador);
        StartCoroutine(postRequest("http://localhost:8000/api/gameinfo", playerToJson));
    }

    // Crear partida en el servidor
    IEnumerator postRequest(string url, string json)
    {
        var uwr = new UnityWebRequest(url, "POST");
        byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(json);
        uwr.uploadHandler = (UploadHandler)new UploadHandlerRaw(jsonToSend);
        uwr.downloadHandler = (DownloadHandler)new DownloadHandlerBuffer();
        uwr.SetRequestHeader("Content-Type", "application/json");
        Debug.Log("Testing");
        //Send the request then wait here until it returns
        yield return uwr.SendWebRequest();
        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            Debug.Log("Received: " + uwr.downloadHandler.text);
            PlayerPrefs.SetString("IDPlay", uwr.downloadHandler.text);
            PlayerPrefs.Save();
        }
    }
}
