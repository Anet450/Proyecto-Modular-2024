using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static CrearPartida;
using UnityEngine.Networking;
using Newtonsoft.Json;
using static ObtenerDatos;
using static System.Net.WebRequestMethods;

public class Play : MonoBehaviour
{
    private int IDPlay;
    private int Time;
    private int IDPlayer;
    private bool HasFinished;
    private int EndingType;
    public string URL = "http://cve-2024-sinnombre-c1a5c43cfc5f.herokuapp.com";
    public Play(int IDPlay, int Time, int IDPlayer, bool HasFinished, int EndingType)
    {
        this.IDPlay = IDPlay;
        this.Time = Time;
        this.IDPlayer = IDPlayer;
        this.HasFinished = HasFinished;
        this.EndingType = EndingType;
    }

    // Start is called before the first frame update
    void Start()
    {
        CreatePlay();
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void UpdataPlay()
    {
        this.Time = PlayerPrefs.GetInt("tiempoMin") * 60 + PlayerPrefs.GetInt("tiempoSeg");
        StartCoroutine(PutPlayRequest("https://cve-2024-sinnombre-c1a5c43cfc5f.herokuapp.com/api/gameinfo"));
    }

    public void CreatePlay()
    {
        Player jugador = new Player();
        // Crear ID de jugador para partida
        jugador.IDJugador = Guid.NewGuid().ToString();
        PlayerPrefs.SetString("PlayerID", jugador.IDJugador);
        string playerToJson = JsonUtility.ToJson(jugador);
        StartCoroutine(PostPlayRequest("https://cve-2024-sinnombre-c1a5c43cfc5f.herokuapp.com/api/gameinfo", playerToJson));
    }

    // Actualizar la partida en el servidor una vez finalizada
    public IEnumerator PutPlayRequest(string url)
    {
        string json = JsonConvert.SerializeObject(this); // Serializamos el objeto Play a JSON
        var uwr = new UnityWebRequest(url, "PUT");
        byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(json);
        uwr.uploadHandler = (UploadHandler)new UploadHandlerRaw(jsonToSend);
        uwr.downloadHandler = (DownloadHandler)new DownloadHandlerBuffer();
        uwr.SetRequestHeader("Content-Type", "application/json");
        // Enviamos la solicitud y esperamos hasta que regrese
        yield return uwr.SendWebRequest();

        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending: " + uwr.error);
        }
        else
        {
            Debug.Log("Received: " + uwr.downloadHandler.text);
        }
    }

    // Crear partida en el servidor
    IEnumerator PostPlayRequest(string url, string json)
    {
        Debug.Log(url);
        var uwr = new UnityWebRequest(url, "POST");
        byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(json);
        uwr.uploadHandler = (UploadHandler)new UploadHandlerRaw(jsonToSend);
        uwr.downloadHandler = (DownloadHandler)new DownloadHandlerBuffer();
        uwr.SetRequestHeader("Content-Type", "application/json");
        //Send the request then wait here until it returns
        yield return uwr.SendWebRequest();
        if (uwr.result == UnityWebRequest.Result.ConnectionError)
        {
            Debug.Log("Error While Sending 1: " + uwr.error);
        }
        else
        {
            Debug.Log("Received: " + uwr.downloadHandler.text);
            PlayerPrefs.SetString("IDPlay", uwr.downloadHandler.text);
            PlayerPrefs.Save();
            this.IDPlay = int.Parse(uwr.downloadHandler.text);
        }
    }
}
