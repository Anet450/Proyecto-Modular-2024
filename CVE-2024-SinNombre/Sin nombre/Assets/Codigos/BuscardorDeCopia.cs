using System;
using System.Collections.Generic;
using UnityEngine;

public class BuscadorDeCopia : MonoBehaviour
{
    public List<ObtenerDatos.Copia> listaDeCopias;

    // Método para buscar la copia más similar a la cadena de búsqueda
    public ObtenerDatos.Copia BuscarCopiaSimilar(string cadenaBusqueda)
    {
        ObtenerDatos.Copia copiaMasSimilar = null;
        int menorDistancia = int.MaxValue;

        foreach (ObtenerDatos.Copia copia in listaDeCopias)
        {
            int distancia = DistanciaLevenshtein(copia, cadenaBusqueda);
            if (distancia < menorDistancia)
            {
                menorDistancia = distancia;
                copiaMasSimilar = copia;
            }
        }

        return copiaMasSimilar;
    }

    // Método para calcular la distancia de Levenshtein entre una copia y una cadena de búsqueda
    private int DistanciaLevenshtein(ObtenerDatos.Copia copia, string cadenaBusqueda)
    {
        string[] campos = {
            copia.CopiedDocument,
            copia.OrginalDocument,
            copia.Motive,
            copia.CreateDate,
            copia.FileDirectory
        };

        int menorDistancia = int.MaxValue;

        foreach (string campo in campos)
        {
            int distancia = LevenshteinDistance(campo, cadenaBusqueda);
            if (distancia < menorDistancia)
            {
                menorDistancia = distancia;
            }
        }

        return menorDistancia;
    }

    // Método para calcular la distancia de Levenshtein entre dos cadenas
    private int LevenshteinDistance(string s, string t)
    {
        int n = s.Length;
        int m = t.Length;
        int[,] d = new int[n + 1, m + 1];

        if (n == 0)
            return m;

        if (m == 0)
            return n;

        for (int i = 0; i <= n; d[i, 0] = i++) ;
        for (int j = 0; j <= m; d[0, j] = j++) ;

        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                int cost = (t[j - 1] == s[i - 1]) ? 0 : 1;
                d[i, j] = Math.Min(
                    Math.Min(d[i - 1, j] + 1, d[i, j - 1] + 1),
                    d[i - 1, j - 1] + cost);
            }
        }
        return d[n, m];
    }
}