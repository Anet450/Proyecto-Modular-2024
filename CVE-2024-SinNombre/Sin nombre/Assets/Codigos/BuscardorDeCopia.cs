using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static ObtenerDatos;

public class BuscadorDeCopia : MonoBehaviour
{
    public static Copia EncontrarCopiaSimilar(string inputString, List<Copia> copias)
    {
        Copia elementoMasSimilar = null;
        double mejorSimilitud = 0;

        foreach (var copia in copias)
        {
            double similitud = CalcularSimilitud(copia, inputString);
            if (similitud > mejorSimilitud)
            {
                mejorSimilitud = similitud;
                elementoMasSimilar = copia;
            }
        }

        return elementoMasSimilar;
    }

    public static double CalcularSimilitud(Copia copia, string texto)
    {
        // Aquí puedes definir cómo calcular la similitud entre el texto y los atributos de la clase Copia.
        // Por ejemplo, puedes usar algoritmos de comparación de cadenas como Levenshtein Distance.
        // Por simplicidad, aquí se realiza una comparación simple utilizando el método Contains().

        string[] atributos = { copia.IDCopy, copia.CopiedDocument, copia.OrginalDocument, copia.Motive, copia.CreateDate, copia.FileDirectory };

        double similitudTotal = 0;
        foreach (var atributo in atributos)
        {
            if (!string.IsNullOrEmpty(atributo))
            {
                if (atributo.ToLower().Contains(texto.ToLower()))
                {
                    similitudTotal += 1; // Puedes ajustar esto dependiendo de qué tan fuerte quieres considerar la similitud.
                }
            }
        }

        // Aquí puedes ajustar la ponderación de la similitud total o cualquier otro cálculo necesario.

        return similitudTotal;
    }
}