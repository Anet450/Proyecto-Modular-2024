using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static ObtenerDatos;

public class BuscadorActualizaciones : MonoBehaviour
{
    public static Actualizacion EncontrarActualizacionSimilar(string inputString, List<Actualizacion> actualizaciones)
    {
        Actualizacion actualizacionMasSimilar = null;
        int maxSimilitud = 0;

        foreach (var actualizacion in actualizaciones)
        {
            int similitud = CalcularSimilitud(inputString, actualizacion);
            if (similitud > maxSimilitud)
            {
                maxSimilitud = similitud;
                actualizacionMasSimilar = actualizacion;
            }
        }

        return actualizacionMasSimilar;
    }

    public static int CalcularSimilitud(string inputString, Actualizacion actualizacion)
    {
        int similitud = 0;
        similitud += LevenshteinDistance(inputString, actualizacion.IDUpdates);
        similitud += LevenshteinDistance(inputString, actualizacion.IDMachineKey);
        similitud += LevenshteinDistance(inputString, actualizacion.UpdateChanges);
        similitud += LevenshteinDistance(inputString, actualizacion.IsSpecialProcess);
        similitud += LevenshteinDistance(inputString, actualizacion.Authorized);
        similitud += LevenshteinDistance(inputString, actualizacion.Date);
        similitud += LevenshteinDistance(inputString, actualizacion.MachineName);
        return similitud;
    }

    public static int LevenshteinDistance(string s, string t)
    {
        if (string.IsNullOrEmpty(s))
        {
            return string.IsNullOrEmpty(t) ? 0 : t.Length;
        }

        if (string.IsNullOrEmpty(t))
        {
            return s.Length;
        }

        int n = s.Length;
        int m = t.Length;
        int[,] d = new int[n + 1, m + 1];

        for (int i = 0; i <= n; d[i, 0] = i++) ;
        for (int j = 0; j <= m; d[0, j] = j++) ;

        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                int cost = (t[j - 1] == s[i - 1]) ? 0 : 1;

                d[i, j] = Math.Min(
                    Math.Min(d[i - 1, j] + 1, d[i, j - 1] + 1),
                    d[i - 1, j - 1] + cost);
            }
        }
        return d[n, m];
    }
}
