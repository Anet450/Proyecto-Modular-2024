using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using static ObtenerDatos;

public class AplicacionPYP : MonoBehaviour
{
    [SerializeField]
    private GameObject AppManuales;
    [SerializeField]
    private GameObject AppAsociados;
    [SerializeField]
    private GameObject AppInventario;

    [SerializeField]
    private GameObject[] controladorAcceso = new GameObject[0];
    [SerializeField]
    private GameObject[] aplicacionesactivas = new GameObject[0];

    bool m;
    public Virus virus;

    public CorrupcionV nivelAvance;

    [SerializeField]
    private GameObject Denegado;

    //public Virus virus;
    //__________Inventario.
    [SerializeField]
    private GameObject ScrollViewInventory;
    [SerializeField]
    private GameObject InventoryPrefab;

    private ObtenerDatos obtenerDatos;

    public List<Inventario> inventarioGlobal = new List<Inventario>();

    public void Start()
    {
        obtenerDatos = this.gameObject.AddComponent<ObtenerDatos>();
        ObtenerInventarios();
        obtenerDatos.GetInventario((List<Inventario> InventarioTotal_) =>
        {
            inventarioGlobal = InventarioTotal_;
            TodoInventario();
        });
    }

    public void TodoInventario()
    {
        float separacionVertical = 40f;
        Vector3 posicion = new Vector3(309.9108f, -19.37238f, -3.5765f);
        foreach (Inventario inventarioG in inventarioGlobal)
        {
            var newInventarioUI = Instantiate(InventoryPrefab, ScrollViewInventory.transform);
            newInventarioUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text textoLabel = newInventarioUI.transform.Find("IDcody").GetComponent<Text>();
            textoLabel.text = inventarioG.IDCode;

            Text textoNOb = newInventarioUI.transform.Find("NObject").GetComponent<Text>();
            textoNOb.text = inventarioG.ObjectName;

            Text textoDesc = newInventarioUI.transform.Find("DescripcionInv").GetComponent<Text>();
            textoDesc.text = inventarioG.Description;

            Text textoUF = newInventarioUI.transform.Find("UFisica").GetComponent<Text>();
            textoUF.text = inventarioG.PhysicalUbication;

            Text textoUI = newInventarioUI.transform.Find("Categoria").GetComponent<Text>();
            textoUI.text = inventarioG.InventoryUbication;

            Text textoConteo = newInventarioUI.transform.Find("NPxO").GetComponent<Text>();
            textoConteo.text = inventarioG.Quantity.ToString();

            newInventarioUI.SetActive(true);

            

        }
    }

    public void ObtenerInventarios()
    {
        obtenerDatos.GetComputadoras(InvCoputo);
    }

   
    public void InvCoputo(List<Computadora> computadoras)
    {
        
    }



    public void Update()
    {
        IngresarContraseña(); //Autorizacion a la base de datos.

    }

    public void AppMan()//Funcion encargada del cambio a las pantallas Funcion Manuales
    {
        AppManuales.SetActive(!AppManuales.activeInHierarchy);
        AppInventario.SetActive(false);
        AppAsociados.SetActive(false);

    }

    public void AppAso()//Funcion encargada del cambio a las pantallas Funcion Asociados
    {
        AppAsociados.SetActive(!AppAsociados.activeInHierarchy);
        AppManuales.SetActive(false);
        AppInventario.SetActive(false);

    }

    public void AppInv()//Funcion encargada del cambio a las pantallas Funcion Inventarios
    {
        AppInventario.SetActive(!AppInventario.activeInHierarchy);
        AppManuales.SetActive(false);
        AppAsociados.SetActive(false);

        
    }
    public void IngresarContraseña()
    {
        if(virus.avance >= 35)
        {
            aplicacionesactivas[0].SetActive(true);
        }

        if (Denegado.activeInHierarchy == true && aplicacionesactivas[0].activeInHierarchy == true)
        {
            if (Input.GetKeyDown(KeyCode.RightAlt))
            {
                controladorAcceso[0].SetActive(!controladorAcceso[0].activeInHierarchy);
                Debug.Log("tecla apretada");
            }
        }
    }
    public void AutentificacionCoordClaseA(string texto)
    {
        string Autorizacion = "ZL0uX0Ps9cbsoDf";

        if (m = Autorizacion == texto)
        {
            Denegado.SetActive(false);
            controladorAcceso[0].SetActive(false);
            Debug.Log("contraseña correcta");
        }
        else if (m = Autorizacion != texto)
        {
            Denegado.SetActive(true);
            controladorAcceso[0].SetActive(false);
            if (virus.avance >= 35 && virus.avance <= 45)
            {
                aplicacionesactivas[0].SetActive(false);
            }
        }
    }
}
