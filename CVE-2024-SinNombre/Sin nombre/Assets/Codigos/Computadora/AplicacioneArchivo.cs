using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;
using static ObtenerDatos;

public class AplicacioneArchivo : MonoBehaviour
{
    //_____________________Variables para uso del menu______
    [SerializeField]
    private GameObject Resultados;
    [SerializeField]
    private GameObject Programas;
    [SerializeField]
    private GameObject Contactos;

    //_______________________Variables de uso_________-
    [SerializeField] 
    private GameObject Archivero;
    [SerializeField]
    private GameObject archMenu;
    public CambioPantalla DenegacionS;


    //________Contraseñas
    [SerializeField]
    private GameObject[] controladorAcceso = new GameObject[0];
    [SerializeField]
    private GameObject[] aplicacionesactivas = new GameObject[0];

    bool m;
    public Virus virus;

    public CorrupcionV nivelAvance;

    [SerializeField]
    private GameObject Denegado;

    //____________Contraseñas BM
    [SerializeField]
    private GameObject KeyBMScrollViewCont;
    [SerializeField]
    private GameObject KeyBMPrefrab;

    public List<GetPasswords_BM> llavesBlackMoon = new List<GetPasswords_BM>();

    [SerializeField]
    private GameObject KeyChScrollViewCont;
    [SerializeField]
    private GameObject KeyChPrefrab;

    public List<GetPasswords_C> llavesCHains = new List<GetPasswords_C>();

    // ObtenerDatos
    private ObtenerDatos obtenerDatos;


    // Start is called before the first frame update
    void Start()
    {
        obtenerDatos = this.gameObject.AddComponent<ObtenerDatos>();
        obtenerDatos.GetGetPasswords_BM((List<GetPasswords_BM> passwordBM_) =>
        {
            llavesBlackMoon = passwordBM_;
            CreateLLavesBMUI();
        });

        obtenerDatos.GetGetPasswords_C((List<GetPasswords_C> passwordCH_) =>
        {
            llavesCHains = passwordCH_;
            CreateLLavesCHUI();
        });
    }

    public void CreateLLavesBMUI()
    {
        float separacionVertical = 50f;
        Vector3 posicion = new Vector3(896f, -18.878f, 0f);
        foreach (GetPasswords_BM passwords_BM in llavesBlackMoon)
        {
            var newPasswordBMUI = Instantiate(KeyBMPrefrab, KeyBMScrollViewCont.transform);
            newPasswordBMUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text Propietario = newPasswordBMUI.transform.Find("CodigoPropietario").GetComponent<Text>();
            Propietario.text = passwords_BM.Propietario;

            Text NombreProp = newPasswordBMUI.transform.Find("NombrePropietario").GetComponent<Text>();
            NombreProp.text = passwords_BM.Name;

            Text Contraseña = newPasswordBMUI.transform.Find("TextoContraseña").GetComponent<Text>();
            Contraseña.text = passwords_BM.Password;

            Text Descripcion = newPasswordBMUI.transform.Find("TextoDescripcion").GetComponent<Text>();
            Descripcion.text = passwords_BM.Description;

            newPasswordBMUI.SetActive(true);

        }
    }

    public void CreateLLavesCHUI()
    {
        float separacionVertical = 50f;
        Vector3 posicion = new Vector3(896f, -18.878f, 0f);
        foreach (GetPasswords_C passwords_CH in llavesCHains)
        {
            var newPasswordCHUI = Instantiate(KeyChPrefrab, KeyChScrollViewCont.transform);
            newPasswordCHUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text ArchivoCodigo = newPasswordCHUI.transform.Find("IDArchivo").GetComponent<Text>();
            ArchivoCodigo.text = passwords_CH.Arch_Code;

            Text CompProp = newPasswordCHUI.transform.Find("NombreComputadora").GetComponent<Text>();
            CompProp.text = passwords_CH.ComputerName;

            Text Contraseña = newPasswordCHUI.transform.Find("TextoContraseña").GetComponent<Text>();
            Contraseña.text = passwords_CH.Password;

            Text Descripcion = newPasswordCHUI.transform.Find("TextoDescripcion").GetComponent<Text>();
            Descripcion.text = passwords_CH.Description;

            newPasswordCHUI.SetActive(true);

        }
    }

    public void AutentificacionArchEspeciales(string texto)
    {
        string Autorizacion = "Password1235";
        if (m = Autorizacion == texto)
        {
            controladorAcceso[0].SetActive(false);
            Denegado.SetActive(false);
            Archivero.SetActive(false);
            archMenu.SetActive(true);
            Contactos.SetActive(!Contactos.activeInHierarchy);
            Programas.SetActive(false);
            Resultados.SetActive(false);

        }
        else if (m = Autorizacion != texto)
        {
            controladorAcceso[0].SetActive(false);
            aplicacionesactivas[0].SetActive(false);
            Denegado.SetActive(false);
        }
    }

    public void ArchResultado()
    {
        Archivero.SetActive(false);
        archMenu.SetActive(true);
        Resultados.SetActive(!Resultados.activeInHierarchy);
        Programas.SetActive(false);
        Contactos.SetActive(false);

        
    }

    public void ArchProgramas()
    {
        Archivero.SetActive(false);
        archMenu.SetActive(true);
        Programas.SetActive(!Programas.activeInHierarchy);
        Resultados.SetActive(false);
        Contactos.SetActive(false);

    }

    public void ArchContacto()
    {/*
        Archivero.SetActive(false);
        archMenu.SetActive(true);
        Contactos.SetActive(!Contactos.activeInHierarchy);
        Programas.SetActive(false);
        Resultados.SetActive(false);
        */
        Denegado.SetActive(!Denegado.activeInHierarchy);
        controladorAcceso[0].SetActive(true);
        aplicacionesactivas[0].SetActive(true);
    }

    public void ArchContratos()
    {
        Archivero.SetActive(false);
        archMenu.SetActive(true);
        DenegacionS.Denegado();

        controladorAcceso[0].SetActive(false);
        aplicacionesactivas[0].SetActive(false);
    }

    public void ArchSalir()
    {
        Archivero.SetActive(true);
        archMenu.SetActive(false);
        Resultados.SetActive(false);
        Programas.SetActive(false);
        Contactos.SetActive(false);

    }

    //___________________Archivo contenedor de Resultados________-

    
}
