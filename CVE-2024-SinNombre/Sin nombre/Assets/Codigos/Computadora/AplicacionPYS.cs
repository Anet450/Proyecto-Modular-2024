using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;
using static ObtenerDatos;

public class AplicacionPYS : MonoBehaviour
{

    public TextMeshProUGUI textoResBusquedaCopia;
    public TextMeshProUGUI textoCopiaABuscar;

    [SerializeField]
    private TMP_Dropdown TipoActualizacion;
    [SerializeField]
    private TMP_Dropdown ProcesoEspecial;
    [SerializeField]
    private TMP_Dropdown Autorizado;

    [SerializeField]
    private TMP_InputField NombreEquipoAct;
    [SerializeField]
    private TMP_InputField CodEquipoAct;
    [SerializeField]
    private TMP_InputField CodActualizacionAct;

    //Variables para obtener las funciones de la aplicacion.
    [SerializeField]
    private GameObject FuncCopias;
    [SerializeField]
    private GameObject FuncActualizar;
    [SerializeField]
    private GameObject FuncPerfil;
    //Variables uso de la funcion Actualizar

    [SerializeField]
    private GameObject Fijar;
    [SerializeField]
    private GameObject Aplicar;
    [SerializeField]
    private GameObject Copiar;


    [SerializeField]
    private Image Barra; //controlador de tiempo de carga
    [SerializeField]
    private GameObject Preparando;
    [SerializeField]
    private TMPro.TextMeshProUGUI Text;
    private bool Cargar = false; //indicador de que la carga es falsa
    private float tiempoM = 10; //tiempo de actualizacion normal
    private float tiempoMR = 5; //tiempo de actualizacion completa
    private float tiempoAct;


    //_________Pruebas.
    public bool LabTB = false; //Computadora incorrecta
    public bool LabTA = false; //Computadora falsa
    public bool ActualizarBM = false;
    public ChatControlador chatDesbl;
    private GameObject Tarea1;

    //Mensajes.
    [SerializeField]
    private GameObject MensajeAdv;
    [SerializeField]
    private GameObject CopiaCompleta;

    //Variables uso de la funcion Perfil.
    public CambioPantalla DenegacionS;
    private bool apagado = false;

    //______Contraseñas---

    [SerializeField]
    private GameObject[] controladorAcceso = new GameObject[0];
    [SerializeField]
    private GameObject[] aplicacionesactivas = new GameObject[0];

    bool m;
    public Virus virus;

    public CorrupcionV nivelAvance;

    [SerializeField]
    private GameObject Denegado;

    [SerializeField]
    private GameObject UpdateScrollView;
    [SerializeField]
    private GameObject UpdateScrollViewCop;

    [SerializeField]
    private GameObject UpdatePrefab;
    [SerializeField]
    private GameObject UpdatePrefabCopi;

    private ObtenerDatos obtenerDatos;

    public List<Actualizacion> actualizaciones = new List<Actualizacion>();
    public List<Copia> ListaCopias = new List<Copia>();
    public List<Copia> CopiasOriginal = new List<Copia>();

    public void Start()
    {
        obtenerDatos = this.gameObject.AddComponent<ObtenerDatos>();
        obtenerDatos.GetActualizaciones((List<Actualizacion> actualizacions_) =>
        {
            actualizaciones = actualizacions_;
            CreateActualizacionesUI();
        });
       
        obtenerDatos.GetCopias((List<Copia> copias_) =>
        {
            CopiasOriginal = copias_;
            ListaCopias = CopiasOriginal;
            CreateCopiUI();
        });

        
    }
    
    public void CreateCopiUI()
    { 
        float separacionVertical = 40f;
        Vector3 posicion = new Vector3(344.0141f, -22.15637f, -3.5765f);
        foreach (Copia copias in ListaCopias)
        {
            var newCopiasUI = Instantiate(UpdatePrefabCopi, UpdateScrollViewCop.transform);
            newCopiasUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text textoLabel = newCopiasUI.transform.Find("TextoCopia").GetComponent<Text>();
            textoLabel.text = copias.IDCopy + " | " + copias.CopiedDocument + " | " + copias.OrginalDocument + " | " + copias.Motive + " | " + copias.CreateDate + " | " + copias.FileDirectory;
            newCopiasUI.SetActive(true);
            
        } 
    }

    public void HandleBuscarCopias(string copia_text)
    {
        if (copia_text == "")
        {
            if (UpdateScrollViewCop.transform.childCount > 0)
            {
                foreach (Transform child in UpdateScrollViewCop.transform)
                {
                    GameObject.Destroy(child.gameObject);
                }
            }
            ListaCopias = CopiasOriginal;    
            CreateCopiUI();
            return;
        }
        Copia copia_encontrada = BuscadorDeCopia.EncontrarCopiaSimilar(copia_text, CopiasOriginal);
        if (UpdateScrollViewCop.transform.childCount > 0)
        {
            foreach (Transform child in UpdateScrollViewCop.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
        }
        if (copia_encontrada != null)
        {
            ListaCopias = new List<Copia>();
            ListaCopias.Add(copia_encontrada);
            CreateCopiUI();
        }
    }

    //____________--
    public void CreateActualizacionesUI()
    {
        
        float separacionVertical = 40f;
        Vector3 posicion = new Vector3(225.5f, -23.5f, -3.5765f);
        foreach (Actualizacion actualizacion in actualizaciones)
        {
            var newActualizacionesUI = Instantiate(UpdatePrefab, UpdateScrollView.transform);
            newActualizacionesUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text textoLabel = newActualizacionesUI.transform.Find("Label").GetComponent<Text>();
            textoLabel.text = actualizacion.IDUpdates + " | " + actualizacion.IDMachineKey + " | " + actualizacion.UpdateChanges + " | " + actualizacion.IsSpecialProcess + " | " + actualizacion.Authorized + " | " + actualizacion.Date;
            newActualizacionesUI.SetActive(true);
        }
    }

    public void HandleBuscarActualizacion(string actualizacion_text)
    {
        if (actualizacion_text == "")
        {
            if (UpdateScrollView.transform.childCount > 0)
            {
                foreach (Transform child in UpdateScrollView.transform)
                {
                    GameObject.Destroy(child.gameObject);
                }
            }
            obtenerDatos.GetActualizaciones((List<Actualizacion> actualizacions_) =>
            {
                actualizaciones = actualizacions_;
                CreateActualizacionesUI();
            });
            return;
        }
        Actualizacion actualizacion_encontrada = BuscadorActualizaciones.EncontrarActualizacionSimilar(actualizacion_text, actualizaciones);
        if (UpdateScrollView.transform.childCount > 0)
        {
            foreach (Transform child in UpdateScrollView.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
        }
        if (actualizacion_encontrada != null)
        {
            var newAsociadoUI = Instantiate(UpdatePrefab, UpdateScrollView.transform);
            Text textoLabel = newAsociadoUI.transform.Find("Label").GetComponent<Text>();
            textoLabel.text = actualizacion_encontrada.IDUpdates + " | " + actualizacion_encontrada.IDMachineKey + " | " + actualizacion_encontrada.UpdateChanges + " | " + actualizacion_encontrada.IsSpecialProcess + " | " + actualizacion_encontrada.Authorized + " | " + actualizacion_encontrada.Date;
            newAsociadoUI.SetActive(true);
        }
    }

    private void Update()
    {
        
        if (Cargar)
        {
            IncActualizacion();
        }
        if (Input.GetKeyDown(KeyCode.X))
        {
            Preparando.SetActive(false);
            tiempoAct = 0;
        }

      //  IngresarContraseña();

    }
    public void DengarS()
    {
        DenegacionS.Denegado();
    }

    public void Copias()
    {
        FuncCopias.SetActive(!FuncCopias.activeInHierarchy);
        FuncActualizar.SetActive(false);
        FuncPerfil.SetActive(false);
        Preparando.SetActive(false);
    }
    public void Actualizar()
    {
        FuncActualizar.SetActive(!FuncActualizar.activeInHierarchy);
        FuncCopias.SetActive(false);
        FuncPerfil.SetActive(false);
        CopiaCompleta.SetActive(false);
        Preparando.SetActive(false);
    }

    public void Perfil()
    {
        FuncPerfil.SetActive(!FuncPerfil.activeInHierarchy);
        FuncCopias.SetActive(false);
        FuncActualizar.SetActive(false);
        Preparando.SetActive(false);

    }

    //_________________________Funciones de la opcion de Actualizar_________________________________

    public void OpcAplicar()
    {
        Aplicar.SetActive(!Aplicar.activeInHierarchy);
        Preparando.SetActive(false);
    }
    public void OpciActualizar()
    {
        MensajeAdv.SetActive(true);
        Aplicar.SetActive(false);
        CopiaCompleta.SetActive(apagado);
        Preparando.SetActive(false);
    }

    public void OpcContinuar()
    {
        MensajeAdv.SetActive(false);
        Aplicar.SetActive(false);
        CopiaCompleta.SetActive(apagado);
        ActActualizacion(); //preparando carga
        Debug.Log("Iniciar actualizacion");

    }

    public void IngresarContraseña()
    {
        if (Denegado.activeInHierarchy == true && aplicacionesactivas[0].activeInHierarchy == true)
        {
            if (Input.GetKeyDown(KeyCode.RightAlt))
            {
                controladorAcceso[0].SetActive(!controladorAcceso[0].activeInHierarchy);
            }
              
        }
    }

    public void AutentificacionAutorizaciones(string texto)
    {
        string Autorizacion = "Password1234";
        if (m = Autorizacion == texto)
        {
            Denegado.SetActive(false);
            controladorAcceso[0].SetActive(false);
            OpciActualizacionRapida();
            Debug.Log("contraseña correcta");
        }
        else if (m = Autorizacion != texto)
        {
            Denegado.SetActive(false);
            Debug.Log("ContraseñaIncorrecta");
            
        }
    }

    public void AutentificacionCoordClaseS(string texto)
    {
        string Autorizacion = "nCGwIhs3a6fSLeN";
        if (m = Autorizacion == texto)
        {

            controladorAcceso[0].SetActive(false);
            controladorAcceso[1].SetActive(true);
            Debug.Log("contraseña correcta");
        }
        else if (m = Autorizacion != texto)
        {
            Denegado.SetActive(false);
            Debug.Log("ContraseñaIncorrecta");
        }
    }

    public void OpciActualizacionRapida()
    {
        IncActualizacionRapida();
        Aplicar.SetActive(false);
        Debug.Log("Iniciar actualizacion rapida");
    }


    public void IncActualizacion()
    {
        tiempoAct -= Time.deltaTime; //resta el tiempo que falta de carga completa
        if(tiempoAct >= 0) //si el tiempo actual es mayor que cero iniciara la carga
        {
            Barra.fillAmount = tiempoAct; //va llenando lo que queda
        }
        if(tiempoAct <= 0) 
        {
            Text.text = "Actualizacion finalizada....\n presiona X para cerrar";
            InCarg(false);
            EleccionFinal();
            
        }
    }
    private void InCarg(bool i)
    {
        Cargar = i;
    }

    public void IncActualizacionRapida()
    {

        Preparando.SetActive(true);
        Text.text = "Preparando actualizacion rapida......";
        tiempoAct = tiempoMR;
        Barra.fillAmount = tiempoMR;
        InCarg(true);
    }
    public void ActActualizacion()
    {
        Preparando.SetActive(true);
        Text.text = "Preparando actualizacion normal......";
        tiempoAct = tiempoM;
        Barra.fillAmount = tiempoM;
        InCarg(true);
    }

    public void OpcCancelar()
    {
        MensajeAdv.SetActive(false);
    }

    public void IncCopia()
    {
        CopiaCompleta.SetActive(true);
        ActActualizacion();
    }

    public void ActTodAutentificacionAutorizaciones(string texto)
    {
        string Autorizacion = "Password1234";
        if (m = Autorizacion == texto)
        {
            Denegado.SetActive(false);
            controladorAcceso[3].SetActive(false);
           
            virus.malaDec = true;
            virus.final6 = 6;
            PlayerPrefs.SetInt("final6", virus.final6);
            Debug.Log("virus.malaDec = true;");
            Debug.Log("contraseña correcta");
        }
        else if (m = Autorizacion != texto)
        {
            Denegado.SetActive(false);
            Debug.Log("ContraseñaIncorrecta");

        }
    }

    public void ActTodAutentificacionCoordClaseS(string texto)
    {
        string Autorizacion = "nCGwIhs3a6fSLeN";
        if (m = Autorizacion == texto)
        {

            controladorAcceso[2].SetActive(false);
            controladorAcceso[3].SetActive(true);
            Debug.Log("contraseña correcta");
        }
        else if (m = Autorizacion != texto)
        {
            Denegado.SetActive(false);
            Debug.Log("ContraseñaIncorrecta");
        }
    }

    public void BuscarActualizacionInterfazNombre(string dato)
    {
        foreach (Actualizacion actualizacion in actualizaciones)
        {
            if (actualizacion.IDMachineKey == dato)
            {
                Debug.Log("Actualizacion encontrada");
                break;
            }
        }
    }

    public void BuscarActualizacionInterfazCodEquip(string dato)
    {
        foreach (Actualizacion actualizacion in actualizaciones)
        {
            if (actualizacion.IDMachineKey == dato)
            {
                Debug.Log("Actualizacion encontrada");
                break;
            }
        }
    }

    public void BuscarActualizacionInterfazCodActualizacion(string dato)
    {
        foreach (Actualizacion actualizacion in actualizaciones)
        {
            if (actualizacion.IDUpdates == dato)
            {
                //if(virus.avance == 10) { 
                if (dato == "5")
                {
                    Debug.Log("Computadora correcta");
                    LabTA = true;
                    LabTB = false;
                    ActualizarBM = false;
                }
                else if (dato == "6")
                {
                    Debug.Log("Computadora incorrecta");
                    LabTB = true;
                    LabTA = false;
                    ActualizarBM = false;
                }
                else if (dato == "7")
                {
                    Debug.Log("Actualizado de las computadoras");
                    LabTB = false;
                    LabTA = false;
                    ActualizarBM = true;
                }
                //}
                if (dato == "8")
                {
                    Debug.Log("Espera");
                    Tarea1 = GameObject.Find("Tarea1");
                    if (Tarea1 == null)
                    {
                        Debug.Log("Ok");
                    }else if(Tarea1 != null)
                    {
                        chatDesbl.selectorT(6);
                        Debug.Log("T");
                    }
                }

                Debug.Log("Actualizacion encontrada");
                // Seleccionar nombre
                NombreEquipoAct.text = actualizacion.MachineName;
                // Seleccionar codigo
                CodEquipoAct.text = actualizacion.IDMachineKey;
                // Seleccionar actualizacion
                CodActualizacionAct.text = actualizacion.IDUpdates;
                // Seleccionar tipo de actualizacion
                switch (actualizacion.UpdateChanges)
                {
                    case "Software ADN-Y":
                        TipoActualizacion.value= 2;
                        break;
                    case "Sistema Operativo Windows":
                        TipoActualizacion.value = 1;
                        break;
                    case "Antivirus":
                        TipoActualizacion.value = 3;
                        break;
                }
                switch (actualizacion.IsSpecialProcess)
                {
                    case "Descargar":
                        ProcesoEspecial.value = 3;
                        break;
                    case "N/A":
                        ProcesoEspecial.value = 1;
                        break;
                }
                switch (actualizacion.Authorized)
                {
                    case "Autorizada":
                        Autorizado.value = 1;
                        break;
                    case "No Autorizada":
                        Autorizado.value = 2;
                        break;
                    default:
                        Autorizado.value = 2;
                        break;
                }
                return;
            }
        }
    }

    public void EleccionFinal()
    {
        if(LabTA == true)
        {
            /*virus.personaE = true;
            virus.final2 = 2;*/
            Debug.Log("virus.personaE = true;");
        }
        else if(LabTB == true)
        {
            Debug.Log("virus.eliminado = true;");
            /*
            virus.eliminado = true;
            virus.final3 = 3;
            PlayerPrefs.SetInt("final3", virus.final3);*/
        }
        else if(ActualizarBM == true)
        {
            Debug.Log("Tambien sirve");
            Debug.Log("virus.eliminado = true;");
            /*
            virus.eliminado = true;
            virus.final3 = 3;
            PlayerPrefs.SetInt("final3", virus.final3);*/
        }
    }
    //________________________Funciones de la opcion Copiar______________________________-
    /*
    public void Buscar(string Texto)
    {
        ObtenerDatos obtenerdatos = this.gameObject.AddComponent<ObtenerDatos>();
        obtenerdatos.GetCopias(HandleBuscarCopias);
        //Buscador
    }

    public void HandleBuscarCopias(List<ObtenerDatos.Copia> copias)
    {
        BuscadorDeCopia buscar_copia = this.gameObject.AddComponent<BuscadorDeCopia>();
        buscar_copia.listaDeCopias = copias;
        ObtenerDatos.Copia copia_encontrada = buscar_copia.BuscarCopiaSimilar(textoCopiaABuscar.text);
        textoResBusquedaCopia.text = copia_encontrada.CopiedDocument + " | " + copia_encontrada.OrginalDocument + " | " + copia_encontrada.CreateDate;
    }
    */
}
