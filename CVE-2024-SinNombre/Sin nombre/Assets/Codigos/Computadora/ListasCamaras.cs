using System.Collections;
using System.Collections.Generic;
using System.Linq;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;
using static ObtenerDatos;

public class ListasCamaras : MonoBehaviour
{
    //_______Total
    [SerializeField]
    private GameObject DispotivoConPrefrab;
    private ObtenerDatos obtenerDatos;

    //__Camaras
    [SerializeField]
    private GameObject CamarasTDScrollView; //Puertas totales desactivas 
    public List<Cameras> CamarasTD = new List<Cameras>();
    [SerializeField]
    private GameObject CamarasTAScrollView; //Puertas totales activas
    public List<Cameras> CamarasTA = new List<Cameras>();
    [SerializeField]
    private GameObject CamarasTDIScrollView; //Puertas totates desactivas individual
    [SerializeField]
    private GameObject CamarasTAIScrollView;//Puertas totales activas individual


    //______Piso 1

    [SerializeField]
    private GameObject CamarasP1DScrollView; //Puertas totales desactivas 
    [SerializeField]
    private GameObject CamarasP1AScrollView; //Puertas totales activas
    [SerializeField]
    private GameObject CamarasP1DIScrollView; //Puertas totates desactivas individual
    [SerializeField]
    private GameObject CamarasP1AIScrollView;

    //_____Piso 2

    [SerializeField]
    private GameObject CamarasP2DScrollView; //Puertas totales desactivas 
    [SerializeField]
    private GameObject CamarasP2AScrollView; //Puertas totales activas
    [SerializeField]
    private GameObject CamarasP2DIScrollView; //Puertas totates desactivas individual
    [SerializeField]
    private GameObject CamarasP2AIScrollView;

    //_____Piso 3

    [SerializeField]
    private GameObject CamarasP3DScrollView; //Puertas totales desactivas 
    [SerializeField]
    private GameObject CamarasP3AScrollView; //Puertas totales activas
    [SerializeField]
    private GameObject CamarasP3DIScrollView; //Puertas totates desactivas individual
    [SerializeField]
    private GameObject CamarasP3AIScrollView;

    //_____Site

    [SerializeField]
    private GameObject CamarasSDScrollView; //Puertas totales desactivas 
    [SerializeField]
    private GameObject CamarasSAScrollView; //Puertas totales activas
    [SerializeField]
    private GameObject CamarasSDIScrollView; //Puertas totates desactivas individual
    [SerializeField]
    private GameObject CamarasSAIScrollView;
    // Start is called before the first frame update
    public List<Cameras> Camaras = new List<Cameras>();

    [SerializeField]
    private GameObject CamarasTotalesActivas;
    [SerializeField]
    private GameObject CamarasTotalesDesactivadas;

    void Start()
    {
        obtenerDatos = this.gameObject.AddComponent<ObtenerDatos>();
        obtenerDatos.GetCamera((List<Cameras> d) =>
        {
            Camaras = d;
            RenderCameras();
        });
    }
    void Update()
    {
        // bandera
        bool virus_activo = false;
        if (Input.GetKeyDown(KeyCode.A))
        {
            virus_activo = true;
        }
        if (virus_activo)
        {
            DesactivarCamaras();
            // para evitar que se repita siempre
            virus_activo = false;
        }
    }


    public void RenderCameras()
    {
        int activas = Camaras.Count(p => p.Status == "Activos");
        int desactivas = Camaras.Count(p => p.Status == "Desactiva");
        CamarasTotalesActivas.GetComponent<TMP_Text>().text = activas.ToString();
        CamarasTotalesDesactivadas.GetComponent<TMP_Text>().text = desactivas.ToString();
        ListaCamarasTotalesActivas(Camaras);
        ListasCamarasP1Act(Camaras);
        ListaCamarasP2Act(Camaras);
        ListaCamarasP3Act(Camaras);
        ListaCamarasSiteAct(Camaras);
        ListaCamarasTotalesDesactivas(Camaras);
        ListaCamarasP1Desac(Camaras);
        ListCamarasP2Desac(Camaras);
        ListaCamarasP3Desac(Camaras);
        ListaCamarasSiteDesac(Camaras);
    }

    public void DesactivarCamaras()
    {
        foreach (Cameras camara in Camaras)
        {
            if (!camara.Place.Contains("Site"))
            {
                camara.Status = "Desactiva";
            }
        }
        RenderCameras();
    }

    //_______Activas

    public void ListaCamarasTotalesActivas(List<Cameras> CamarasActTotal)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTA = CamarasActTotal.Where(comp => comp.Status == "Activos" && comp.EnSistema != "No").ToList();

        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasTAScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasTAIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListasCamarasP1Act(List<Cameras> CamarasP1Act)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTA = CamarasP1Act.Where(comp => comp.Status == "Activos" && comp.EnSistema == "Piso 1" && comp.EnSistema != "No").ToList();

        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasP1AScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasP1AIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListaCamarasP2Act(List<Cameras> CamarasP2Act)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTA = CamarasP2Act.Where(comp => comp.Status == "Activos" && comp.EnSistema == "Piso 2" && comp.EnSistema != "No").ToList();

        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasP2AScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasP2AIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListaCamarasP3Act(List<Cameras> CamarasP3Act)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTA = CamarasP3Act.Where(comp => comp.Status == "Activos" && comp.EnSistema == "Piso 3" && comp.EnSistema != "No").ToList();

        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasP3AScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasP3AIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListaCamarasSiteAct(List<Cameras> CamarasSiteAct)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTA = CamarasSiteAct.Where(comp => comp.Status == "Activos" && comp.EnSistema == "Piso 1" && comp.EnSistema != "No").ToList();

        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasSAScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTA.Count > 0)
        {
            foreach (Cameras camara in CamarasTA)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasSAIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    //________Desactivas
    
    public void ListaCamarasTotalesDesactivas(List<Cameras> CamarasDesacTotal)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTD = CamarasDesacTotal.Where(comp => comp.Status == "Desactiva" && comp.EnSistema != "No").ToList();

        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasTDScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasTDIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListaCamarasP1Desac(List<Cameras> CamarasP1Desac)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTD = CamarasP1Desac.Where(comp => comp.Status == "Desactiva" && comp.EnSistema == "Piso 1" && comp.EnSistema != "No").ToList();

        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasP1DScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasP1DIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListCamarasP2Desac(List<Cameras> CamarasP2Desac)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTD = CamarasP2Desac.Where(comp => comp.Status == "Desactiva" && comp.EnSistema == "Piso 2" && comp.EnSistema != "No").ToList();

        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasP2DScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasP2DIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    } 

    public void ListaCamarasP3Desac(List<Cameras> CamarasP3Desac)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTD = CamarasP3Desac.Where(comp => comp.Status == "Desactiva" && comp.EnSistema == "Piso 1" && comp.EnSistema != "No").ToList();

        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasP3DScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasP3DIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }

    public void ListaCamarasSiteDesac(List<Cameras> CamarasSiteDesac)
    {
        float separacionVertical = 55f;
        int c = 0;
        Vector3 posicion = new Vector3(452f, -23.8f, -3.5765f);
        CamarasTD = CamarasSiteDesac.Where(comp => comp.Status == "Desactiva" && comp.EnSistema == "Site" && comp.EnSistema != "No").ToList();

        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesActiva = Instantiate(DispotivoConPrefrab, CamarasSDScrollView.transform);
                CamarasTotalesActiva.transform.localPosition = posicion;

                posicion.y -= separacionVertical;
                Text textoLabel = CamarasTotalesActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesActiva.SetActive(true);
            }
        }

        Vector3 posicionIndividual = new Vector3(445f, -37f, 0f);
        if (CamarasTD.Count > 0)
        {
            foreach (Cameras camara in CamarasTD)
            {
                c += 1;
                var CamarasTotalesIActiva = Instantiate(DispotivoConPrefrab, CamarasSDIScrollView.transform);
                CamarasTotalesIActiva.transform.localPosition = posicionIndividual;

                posicionIndividual.y -= separacionVertical;
                Text textoLabel = CamarasTotalesIActiva.transform.Find("TextoControl").GetComponent<Text>();
                textoLabel.text = camara.IDCamera + " | " + camara.CameraName + " | " + camara.IPDir + " | " + camara.Site + " | " + camara.Place;
                CamarasTotalesIActiva.SetActive(true);
            }
        }
    }
}
