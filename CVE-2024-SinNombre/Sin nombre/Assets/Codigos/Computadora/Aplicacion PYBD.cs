using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using UnityEngine.UIElements;
using Unity.VisualScripting;
using UnityEngine.UI;
using TMPro;
using static ObtenerDatos;

public class AplicacionPYBD : MonoBehaviour
{
    
    // Computadoras Activas y Desactivadas
    public List<Computadora> computadorasActivas = new List<Computadora>();
    public List<Computadora> computadorasDesactivadas = new List<Computadora>();
    public List<Computadora> computadorasGlobal = new List<Computadora>();

    // ObtenerDatos
    private ObtenerDatos obtenerDatos;

    // Asociados
    public List<Asociado> asociados = new List<Asociado>();

    // UI para computadoras activas
    [SerializeField]
    private GameObject ComputadorasActivasScroll;
    [SerializeField]
    private GameObject ComputadoraActiva;

    // UI para computadoras Noactivas
    [SerializeField]
    private GameObject ComputadorasNoActivasScroll;
    [SerializeField]
    private GameObject ComputadoraNoActiva;

    // Texto para buscar computadoras
    public TextMeshProUGUI textoBuscarComputadoras;

    // UI para asociado
    public GameObject AsociadoUI;
    public GameObject AsociadosScrollUI;

    // Horarios
    public List<Horario> horarios = new List<Horario>();
    // UI para Horario
    public GameObject HorarioUI;
    public GameObject HorariosScrollUI;

    [SerializeField]
    private GameObject RegComp;
    [SerializeField]
    private GameObject Horarios;
    [SerializeField]
    private GameObject Personal;

    // Start is called before the first frame update
    void Start()
    {
        obtenerDatos = this.gameObject.AddComponent<ObtenerDatos>();
        // Obtener computadoras 
        ObtenerComputadoras();
        // Obtener asociados
        obtenerDatos.GetAsociados((List<Asociado> asociados_) =>
        {
            asociados = asociados_;
            CreateAsociadosOnUI();
        });
        // Obtener horarios
        obtenerDatos.GetHorarios((List<Horario> horarios_) =>
        {
            horarios = horarios_;
            CreateHorarioOnUI();
        });
        
    }

    // Buscar Horario
    public void HandleBuscarHorario(string horario)
    {
        if (horario == "")
        {
            if (HorariosScrollUI.transform.childCount > 0)
            {
                foreach (Transform child in HorariosScrollUI.transform)
                {
                    GameObject.Destroy(child.gameObject);
                }
            }
            obtenerDatos.GetHorarios((List<Horario> horarios_) =>
            {
                horarios = horarios_;
                CreateHorarioOnUI();
            });
            return;
        }
        Horario horario_encontrado = BuscadorDeHorarios.BuscarHorarioSimilar(horarios, horario);
        if (HorariosScrollUI.transform.childCount > 0)
        {
            foreach (Transform child in HorariosScrollUI.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
        }
        if (horario_encontrado != null)
        {
            var newHorarioUI = Instantiate(HorarioUI, HorariosScrollUI.transform);
            Text textoLabel = newHorarioUI.transform.Find("Label").GetComponent<Text>();
            textoLabel.text = horario_encontrado.IDCode + " | " + horario_encontrado.Name + " | " + horario_encontrado.Schedule + " | " + horario_encontrado.Hr_E + " | " + horario_encontrado.Hr_EC + " | " + horario_encontrado.Hr_FC + " | " + horario_encontrado.Hr_F + " | " + horario_encontrado.Date;
            newHorarioUI.SetActive(true);
        }
    }   

    // Buscar asociados
    public void HandleBuscarAsociado(string asociado)
    {
        if (asociado == "")
        {
            if (AsociadosScrollUI.transform.childCount > 0)
            {
                foreach (Transform child in AsociadosScrollUI.transform)
                {
                    GameObject.Destroy(child.gameObject);
                }
            }
            obtenerDatos.GetAsociados((List<Asociado> asociados_) =>
            {
                asociados = asociados_;
                CreateAsociadosOnUI();
            });
            return;
        }
        Asociado asociado_encontrado = BuscadorDeAsociados.BuscarAsociadoSimilar(asociados, asociado);
        if (AsociadosScrollUI.transform.childCount > 0)
        {
            foreach (Transform child in AsociadosScrollUI.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
        }
        if (asociado_encontrado != null)
        {
            var newAsociadoUI = Instantiate(AsociadoUI, AsociadosScrollUI.transform);
            Text textoLabel = newAsociadoUI.transform.Find("Label").GetComponent<Text>();
            textoLabel.text = asociado_encontrado.IDCode + " | " + asociado_encontrado.Name + " | " + asociado_encontrado.Positon;
            newAsociadoUI.SetActive(true);
        }
    }

    // Buscar computadoras
    public void HandleBuscarComputadora(string computadora)
    {
        if (computadora == "")
        {
            if (ComputadorasActivasScroll.transform.childCount > 0)
            {
                foreach (Transform child in ComputadorasActivasScroll.transform)
                {
                    GameObject.Destroy(child.gameObject);
                }

            }
            if (ComputadorasNoActivasScroll.transform.childCount > 0)
            {
                foreach (Transform child in ComputadorasNoActivasScroll.transform)
                {
                    GameObject.Destroy(child.gameObject);
                }
            }
            ObtenerComputadoras();
            return;
        }
        obtenerDatos.GetComputadoras(SetComputadorasGlobal);
        
        Computadora computadoras_encontradas = BuscadorDeComputadoras.BuscarComputadoraSimilar(computadorasGlobal, computadora);
        // Delete all instances of ComputadoraActiva and ComputadoraNoActiva and create new ones with the new data
        // Verify if exists any child in the scroll view
        if (ComputadorasActivasScroll.transform.childCount > 0)
        {
            foreach (Transform child in ComputadorasActivasScroll.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
            
        }
        if (ComputadorasNoActivasScroll.transform.childCount > 0)
        {
            foreach (Transform child in ComputadorasNoActivasScroll.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
        }
        if (computadoras_encontradas != null)
        {
            HandleGetComputers(new List<Computadora> { computadoras_encontradas });
        }
    }

    public void SetComputadorasGlobal (List<Computadora> computadoras_to_return)
    {
        computadorasGlobal = computadoras_to_return;
    }

    public void ObtenerComputadoras()
    {
        obtenerDatos.GetComputadoras(HandleGetComputers);
    }

    public void HandleGetComputers(List<Computadora> computadoras)
    {
        float separacionVertical = 35f;
        // Computadoras Activas
        computadorasActivas = computadoras.Where(comp => comp.Status == "Activa").ToList();
        Vector3 posicion = new Vector3(90.83f, -32f, -3.57650f);
        if (computadorasActivas.Count > 0) {
            foreach (Computadora computadora in computadorasActivas)
            {
                // Instanciar la nueva computadora activa
                var nuevaComputadoraActiva = Instantiate(ComputadoraActiva, ComputadorasActivasScroll.transform);
                // Establecer la posición de la nueva computadora activa
                nuevaComputadoraActiva.transform.localPosition = posicion;
                // Incrementar la posición vertical para la próxima computadora activa
                posicion.y -= separacionVertical;

                Text textoLabel = nuevaComputadoraActiva.transform.Find("Label").GetComponent<Text>();
                textoLabel.text = computadora.IDCode+ " | "+ computadora.Name + " | " + computadora.User;
                nuevaComputadoraActiva.SetActive(true);
            }
        }
        // Computadoras no Activadas
        computadorasDesactivadas = computadoras.Where(comp => comp.Status == "Desactivada").ToList();
        posicion = new Vector3(90.38f, -31f, -3.57650f);
        ComputadoraNoActiva.transform.localPosition = new Vector3(posicion.x, posicion.y - separacionVertical, posicion.z);
        ComputadoraNoActiva.SetActive(false);
        if (computadorasDesactivadas.Count > 0)
        {
            foreach (Computadora computadora in computadorasDesactivadas)
            {
                // Instanciar la nueva computadora activa
                var nuevaComputadoraNoActiva = Instantiate(ComputadoraNoActiva, ComputadorasNoActivasScroll.transform);
                // Establecer la posición de la nueva computadora activa
                nuevaComputadoraNoActiva.transform.localPosition = posicion;
                // Incrementar la posición vertical para la próxima computadora activa
                posicion.y -= separacionVertical;
                Text textoLabel = nuevaComputadoraNoActiva.transform.Find("Label").GetComponent<Text>();
                textoLabel.text = computadora.IDCode + " | " + computadora.Name + " | " + computadora.User;
                nuevaComputadoraNoActiva.SetActive(true);
            }
        }
    }

    public void CreateAsociadosOnUI()
    {
        float separacionVertical = 55f;
        Vector3 posicion = new Vector3(260.9f, -29.8f, -5.25209f);
        foreach (Asociado asociado in asociados)
        {
            var newAsociadoUI = Instantiate(AsociadoUI, AsociadosScrollUI.transform);
            newAsociadoUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text textoLabel = newAsociadoUI.transform.Find("Label").GetComponent<Text>();
            textoLabel.text = asociado.IDCode + " | " + asociado.Name + " | " + asociado.Positon;
            newAsociadoUI.SetActive(true);
        }
    }

    public void CreateHorarioOnUI()
    {
        float separacionVertical = 55f;
        Vector3 posicion = new Vector3(153.43f,-48.21f,-5.25209f);
        foreach (Horario horario in horarios)
        {
            var newHorarioUI = Instantiate(HorarioUI, HorariosScrollUI.transform);
            newHorarioUI.transform.localPosition = posicion;
            posicion.y -= separacionVertical;

            Text textoLabel = newHorarioUI.transform.Find("Label").GetComponent<Text>();
            textoLabel.text = horario.IDCode + " | " + horario.Name + " | " + horario.Schedule + " | " + horario.Hr_E + " | " + horario.Hr_EC + " | " + horario.Hr_FC + " | " + horario.Hr_F + " | " + horario.Date;
            newHorarioUI.SetActive(true);
        }
    }   

    // Update is called once per frame
    void Update()
    {
        
    }

    public void RegistroCom()
    {
        RegComp.SetActive(!RegComp.activeInHierarchy);
        Horarios.SetActive(false);
        Personal.SetActive(false);
    }

    public void RegistroHor()
    {
        Horarios.SetActive(!Horarios.activeInHierarchy);
        RegComp.SetActive(false);
        Personal.SetActive(false);
    }

    public void RegsirtoPer()
    {
        Personal.SetActive(!Personal.activeInHierarchy);
        RegComp.SetActive(false);
        Horarios.SetActive(false); 
    }
}
