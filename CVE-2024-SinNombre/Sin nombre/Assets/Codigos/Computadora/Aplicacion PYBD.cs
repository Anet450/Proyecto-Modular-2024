using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using UnityEngine.UIElements;
using Unity.VisualScripting;
using UnityEngine.UI;
using TMPro;
using static ObtenerDatos;

public class AplicacionPYBD : MonoBehaviour
{
    
    // Computadoras Activas y Desactivadas
    public List<ObtenerDatos.Computadora> computadorasActivas = new List<ObtenerDatos.Computadora>();
    public List<ObtenerDatos.Computadora> computadorasDesactivadas = new List<ObtenerDatos.Computadora>();

    // UI para computadoras activas
    [SerializeField]
    private GameObject ComputadorasActivasScroll;
    [SerializeField]
    private GameObject ComputadoraActiva;

    // UI para computadoras Noactivas
    [SerializeField]
    private GameObject ComputadorasNoActivasScroll;
    [SerializeField]
    private GameObject ComputadoraNoActiva;

    // Texto para buscar computadoras
    public TextMeshProUGUI textoBuscarComputadoras;


    [SerializeField]
    private GameObject RegComp;
    [SerializeField]
    private GameObject Horarios;
    [SerializeField]
    private GameObject Personal;

    // Start is called before the first frame update
    void Start()
    {
        // Obtener computadoras 
        ObtenerComputadoras();
    }

    // Buscar computadoras

    public void HandleBuscarComputadora(string computadora)
    {
        
        List<ObtenerDatos.Computadora> computadoras = new List<ObtenerDatos.Computadora>(computadorasActivas);
        computadoras.Concat(computadorasDesactivadas);
        Computadora computadoras_encontradas = BuscadorDeComputadoras.BuscarComputadoraSimilar(computadoras, computadora);
    }

    public void ObtenerComputadoras()
    {
        ObtenerDatos obtenerdatos = this.gameObject.AddComponent<ObtenerDatos>();
        obtenerdatos.GetComputadoras(HandleGetComputers);
    }

    public void HandleGetComputers(List<ObtenerDatos.Computadora> computadoras)
    {
        float separacionVertical = 35f;
        // Computadoras Activas
        computadorasActivas = computadoras.Where(comp => comp.Status == "Activa").ToList();
        Vector3 posicion = ComputadoraActiva.transform.localPosition;
        ComputadoraActiva.transform.localPosition = new Vector3(posicion.x, posicion.y - separacionVertical, posicion.z);
        ComputadoraActiva.SetActive(false);
        if (computadorasActivas.Count > 0) {
            foreach (ObtenerDatos.Computadora computadora in computadorasActivas)
            {
                // Instanciar la nueva computadora activa
                var nuevaComputadoraActiva = Instantiate(ComputadoraActiva, ComputadorasActivasScroll.transform);
                // Establecer la posición de la nueva computadora activa
                nuevaComputadoraActiva.transform.localPosition = posicion;
                // Incrementar la posición vertical para la próxima computadora activa
                posicion.y -= separacionVertical;

                Text textoLabel = nuevaComputadoraActiva.transform.Find("Label").GetComponent<Text>();
                textoLabel.text = computadora.IDCode+ " | "+ computadora.Name + " | " + computadora.User;
                nuevaComputadoraActiva.SetActive(true);
            }
        }
        // Computadoras no Activadas
        computadorasDesactivadas = computadoras.Where(comp => comp.Status == "Desactivada").ToList();
        posicion = ComputadoraNoActiva.transform.localPosition;
        ComputadoraNoActiva.transform.localPosition = new Vector3(posicion.x, posicion.y - separacionVertical, posicion.z);
        ComputadoraNoActiva.SetActive(false);
        if (computadorasDesactivadas.Count > 0)
        {
            foreach (ObtenerDatos.Computadora computadora in computadorasDesactivadas)
            {
                // Instanciar la nueva computadora activa
                var nuevaComputadoraNoActiva = Instantiate(ComputadoraNoActiva, ComputadorasNoActivasScroll.transform);
                // Establecer la posición de la nueva computadora activa
                nuevaComputadoraNoActiva.transform.localPosition = posicion;
                // Incrementar la posición vertical para la próxima computadora activa
                posicion.y -= separacionVertical;
                Text textoLabel = nuevaComputadoraNoActiva.transform.Find("Label").GetComponent<Text>();
                textoLabel.text = computadora.IDCode + " | " + computadora.Name + " | " + computadora.User;
                nuevaComputadoraNoActiva.SetActive(true);
            }
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void RegistroCom()
    {
        RegComp.SetActive(!RegComp.activeInHierarchy);
        Horarios.SetActive(false);
        Personal.SetActive(false);
    }

    public void RegistroHor()
    {
        Horarios.SetActive(!Horarios.activeInHierarchy);
        RegComp.SetActive(false);
        Personal.SetActive(false);
    }

    public void RegsirtoPer()
    {
        Personal.SetActive(!Personal.activeInHierarchy);
        RegComp.SetActive(false);
        Horarios.SetActive(false);
    }
}
