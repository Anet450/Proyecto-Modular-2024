using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;

public class IACorrupcion : MonoBehaviour
{
    public Virus virus;
    public bool elegido;
    int contador;
    int reinicio;

    //Contadores

    public Button MaterialesLab; int clickMatLab = 0;
    public Button MaterialesQui; int clickMatQ = 0;
    public GameObject MaterialesLim; int clickMatLim = 0;
    public GameObject MaterialesApoMaqu; int clickMatApoMaqu = 0;
    public GameObject ManualesPYP; int clickManPYP = 0;
    public GameObject ManualesPYS; int clickManPyS = 0;
    public GameObject ManualesPYBD; int clickManPyBD = 0;
    public GameObject ManualesControl; int clickManControl = 0;
    public GameObject ManualesArch; int clickManArch = 0;

    List<IACorrupcion> ContadorClicks = new List<IACorrupcion>();
    Dictionary<Button, IACorrupcion> botonesACorruptores = new Dictionary<Button, IACorrupcion>();


    private void Start()
    {
    }

    void Update()
    {

        if (elegido == true) {

            if(MaterialesLab.interactable == true)
            {
                AsignarContador(MaterialesLab, clickMatLab);
            }
            if(MaterialesQui.interactable == true)
            {
                AsignarContador(MaterialesQui, clickMatQ);
            }

            Debug.Log("Número de contadores en la lista: " + ContadorClicks.Count);

            IACorrupcion contadorConMayorNumero = ObtenerContadorConMayorNumero();
            //___________Comparar
            IACorrupcion contadorMaterialesLab = botonesACorruptores[MaterialesLab];
            if (contadorConMayorNumero == contadorMaterialesLab && MaterialesLab.interactable == true)
            {
                MaterialesLab.interactable = false;
            }

            IACorrupcion contadorMaterialesQui = botonesACorruptores[MaterialesQui];
            if(contadorConMayorNumero == contadorMaterialesQui && MaterialesQui.interactable == true)
            {
                MaterialesQui.interactable = false;
            }
            ContadorClicks.Remove(contadorConMayorNumero);
            Debug.Log(contadorConMayorNumero);

            ContadorClicks.Clear();

            elegido = false;
            restablecer();
        }
    }
    public void AsignarContador(Button nombre, int valorInicial)
    {

        GameObject nuevoContadorObj = new GameObject(nombre.name);
        IACorrupcion nuevoContador = nuevoContadorObj.AddComponent<IACorrupcion>();
        nuevoContador.contador = valorInicial;
        ContadorClicks.Add(nuevoContador);

        botonesACorruptores.Add(nombre, nuevoContador);
    }

    public IACorrupcion ObtenerContadorDeBoton(Button boton)
    {
        if (botonesACorruptores.ContainsKey(boton))
        {
            return botonesACorruptores[boton];
        }
        else
        {
            return null;
        }
    }
    IACorrupcion ObtenerContadorConMayorNumero()
    {
        IACorrupcion contadorMayor = null;
        int maxNumero = int.MinValue;

        foreach (IACorrupcion contador in ContadorClicks)
        {
            if (contador.contador > maxNumero)
            {
                maxNumero = contador.contador;
                contadorMayor = contador;
            }
        }

        return contadorMayor;
        
    }

  
    public void restablecer()
    {
        clickMatLab = 0;
        clickMatQ = 0;
    }
    public void BotonMaterialesLab()
    {
        clickMatLab++;
        Debug.Log("Boton materiales lab" + clickMatLab);
    }

    public void BotonMaterialQui()
    {
        clickMatQ++;
        Debug.Log("Boton materiales Qui" + clickMatQ);
    }
}
