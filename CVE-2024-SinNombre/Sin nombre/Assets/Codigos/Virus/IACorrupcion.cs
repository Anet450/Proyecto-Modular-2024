using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;

public class IACorrupcion : MonoBehaviour
{
    public Virus virus;
    public bool elegido;
    int contador;
    int reinicio;

    //Contadores
    //_________Proyect Y Program
    public Button MaterialesLab; int clickMatLab = 0; string PYPMatLab = "MaterialesLab";
    public Button MaterialesQui; int clickMatQ = 0; string PYPMatQ = "MaterialesQ";
    public Button MaterialesLim; int clickMatLim = 0; string PYPMatLim = "MaterialesLim";
    public Button MaterialesApoMaqu; int clickMatApoMaqu = 0; string PYPMatApoM = "ApoyoMa";
    public Button ManualesPYP; int clickManPYP = 0;  string PYPManPYP = "ManualPYP";
    public Button ManualesPYS; int clickManPYS = 0; string PYPManPYS = "ManualPYS";
    public Button ManualesPYBD; int clickManPYBD = 0; string PYPManPYBD = "ManualPYBD";
    public Button ManualesControl; int clickManControl = 0; string PYPManContr = "ManualControl";
    public Button ManualesArch; int clickManArch = 0; string PYPManArch = "ManualPArch";

    List<IACorrupcion> ContadorClicks = new List<IACorrupcion>();

    private void Start()
    {

    }
    
    public void AgregarContadores()
    {

        if (MaterialesLab.interactable == true && clickMatLab >= 4)
        {
            AsignarContador(PYPMatLab, clickMatLab);

        }
        if (MaterialesQui.interactable == true && clickMatQ >= 4)
        {
            AsignarContador(PYPMatQ, clickMatQ);
        }
        if(MaterialesLim.interactable == true && clickMatLim >= 4)
        {
            AsignarContador(PYPMatLim, clickMatLim);
        }
        if(MaterialesApoMaqu.interactable == true && clickMatApoMaqu >= 4)
        {
            AsignarContador(PYPMatApoM, clickMatApoMaqu);
        }
        if(ManualesPYP.interactable == true && clickManPYP >= 4)
        {
            AsignarContador(PYPManPYP, clickManPYP);
        }
        if(ManualesPYS.interactable == true && clickManPYS  >= 4)
        {
            AsignarContador(PYPManPYS, clickManPYS);
        }
        if(ManualesPYBD.interactable == true && clickManPYBD >= 4)
        {
            AsignarContador(PYPManPYBD, clickManPYBD);
        }
        if(ManualesControl.interactable == true && clickManControl >= 4)
        {
            AsignarContador(PYPManContr, clickManControl);
        }
        if(ManualesArch.interactable == true && clickManArch  >= 4)
        {
            AsignarContador(PYPManArch, clickManArch);
        }
        Debug.Log("Número de contadores en la lista: " + ContadorClicks.Count);
    }
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.B))
        {
            elegido = true;
        }
        if (elegido == true) {

            AgregarContadores();

            IACorrupcion contadorConMayorNumero = ObtenerContadorConMayorNumero();

            if (contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPMatLab)
            {
                BotonMaterialesLab(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPMatQ)
            {
                BotonMaterialQui(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPMatLim)
            {
                BotonMaterialLim(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPMatApoM)
            {
                BotonMaterialApoMa(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPManPYP)
            {
                BotonManualPYP(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPManPYS)
            {
                BotonManualPYS(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPManPYBD)
            {
                BotonManualPYBD(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPManContr)
            {
                BotonManualPYControl(3);
            }
            if(contadorConMayorNumero != null && contadorConMayorNumero.gameObject.name == PYPManArch)
            {
                BotonManualPYArchivo(3);
            }

            Debug.Log(contadorConMayorNumero);
            ContadorClicks.Clear();

            elegido = false;
            Reiniciar();
        }
    }

    public void AsignarContador(string nombre, int valorInicial)
    {

        GameObject nuevoContadorObj = new GameObject(nombre);
        IACorrupcion nuevoContador = nuevoContadorObj.AddComponent<IACorrupcion>();
        nuevoContador.contador = valorInicial;
        ContadorClicks.Add(nuevoContador);
    }
    
    
    IACorrupcion ObtenerContadorConMayorNumero()
    {
        IACorrupcion contadorMayor = null;
        int maxNumero = int.MinValue;

        foreach (IACorrupcion contador in ContadorClicks)
        {
            if (contador.contador > maxNumero)
            {
                maxNumero = contador.contador;
                contadorMayor = contador;
            }
        }

        return contadorMayor;
        
    }

    public void Reiniciar()
    {
        BotonMaterialesLab(2);
        BotonMaterialQui(2);
        BotonMaterialLim(2);
        BotonMaterialApoMa(2);
        BotonManualPYP(2);
        BotonManualPYS(2);
        BotonManualPYBD(2);
        BotonManualPYControl(2);
        BotonManualPYArchivo(2);
    }
  
    public void BotonMaterialesLab(int i)
    {
        switch (i) {
            case 1:
                clickMatLab++;
                Debug.Log("Boton materiales lab" + clickMatLab);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("MaterialesLab");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                        }
                        else
                        {
                            Destroy(obj);
                        }
                    }
                }

                if (clickMatLab < 4)
                {
                }
                else if (clickMatLab >= 4)
                {
                    clickMatLab = 0;
                }
                break;
            case 3:
                MaterialesLab.interactable = false;
                break;
        }
    }

    public void BotonMaterialQui(int i)
    {
        switch (i)
        {
            case 1:
                clickMatQ++;
                Debug.Log("Boton materiales Qui" + clickMatQ);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("MaterialesQ");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            Destroy(obj);
                        }
                    }
                }

                if (clickMatQ < 4)
                {
                }
                else if (clickMatLab >= 4)
                {
                    clickMatQ = 0;
                }
                break;
            case 3:
                MaterialesQui.interactable = false;
                break;
        }
    }

    public void BotonMaterialLim(int i)
    {
        switch (i)
        {
            case 1:
                clickMatLim++;
                Debug.Log("Boton materiales Lim" + clickMatLim);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("MaterialesLim");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickMatLim < 4)
                {
                    
                }
                else if (clickMatLim >= 4)
                {
                    clickMatLim = 0;
                }
                break;
            case 3:
                MaterialesLim.interactable = false;
                break;
        }
    }

    public void BotonMaterialApoMa(int i)
    {
        switch (i)
        {
            case 1:
                clickMatApoMaqu++;
                Debug.Log("Boton materiales Apoyo Maquinas" + clickMatApoMaqu);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("ApoyoMa");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickMatApoMaqu < 4)
                {

                }
                else if (clickMatApoMaqu >= 4)
                {
                    clickMatApoMaqu = 0;
                }
                break;
            case 3:
                MaterialesApoMaqu.interactable = false;
                break;
        }
    }

    public void BotonManualPYP(int i)
    {
        switch (i)
        {
            case 1:
                clickManPYP++;
                Debug.Log("Boton materiales Manual de PYP " + clickManPYP);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("ManualPYP");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickManPYP < 4)
                {

                }
                else if (clickManPYP >= 4)
                {
                    clickManPYP = 0;
                }
                break;
            case 3:
                ManualesPYP.interactable = false;
                break;
        }
    }

    public void BotonManualPYS(int i)
    {
        switch (i)
        {
            case 1:
                clickManPYS++;
                Debug.Log("Boton materiales Manual de PYS " + clickManPYS);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("ManualPYS");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickManPYS < 4)
                {

                }
                else if (clickManPYS >= 4)
                {
                    clickManPYS = 0;
                }
                break;
            case 3:
                ManualesPYS.interactable = false;
                break;
        }
    
    }

    public void BotonManualPYBD(int i)
    {
        switch (i)
        {
            case 1:
                clickManPYBD++;
                Debug.Log("Boton materiales Manual de PYBD " + clickManPYBD);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("ManualPYBD");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickManPYBD < 4)
                {

                }
                else if (clickManPYBD >= 4)
                {
                    clickManPYBD = 0;
                }
                break;
            case 3:
                ManualesPYBD.interactable = false;
                break;
        }
    }

    public void BotonManualPYControl(int i)
    {
        switch (i)
        {
            case 1:
                clickManControl++;
                Debug.Log("Boton materiales Manual de Control " + clickManControl);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("ManualControl");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickManControl < 4)
                {

                }
                else if (clickManControl >= 4)
                {
                    clickManControl = 0;
                }
                break;
            case 3:
                ManualesControl.interactable = false;
                break;
        }
    }
    
    public void BotonManualPYArchivo(int i)
    {
        switch (i)
        {
            case 1:
                clickManArch++;
                Debug.Log("Boton materiales Manual de Archivo " + clickManArch);
                break;
            case 2:
                GameObject virusCorrupcion = GameObject.Find("ManualPArch");

                if (virusCorrupcion != null)
                {
                    GameObject[] virusCorrupciones = GameObject.FindObjectsOfType<GameObject>().Where(obj => obj.name == virusCorrupcion.name).ToArray();

                    foreach (GameObject obj in virusCorrupciones)
                    {
                        if (obj.CompareTag("Original"))
                        {
                            // Conserva el GameObject, no se hace nada
                        }
                        else
                        {
                            // Si el GameObject no tiene el tag "VirusControl", se destruye
                            Destroy(obj);
                        }
                    }
                }

                if (clickManArch < 4)
                {

                }
                else if (clickManArch >= 4)
                {
                    clickManArch = 0;
                }
                break;
            case 3:
                ManualesArch.interactable = false;
                break;
        }
    }
}
